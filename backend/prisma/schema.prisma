// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(PACIENTE)
  paciente  Paciente?
  createdAt DateTime  @default(now())
  medicos   Medico[]
  exames    Exame[]
}

enum Role {
  ADMIN
  MEDICO
  PACIENTE
}

model Paciente {
  id        String   @id @default(uuid())
  cpf       String   @unique
  dataNasc  DateTime
  name      String?
  telefone  String?
  endereco  String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  exames      Exame[]
  Agendamento Agendamento[]
}

model Medico {
  id            String        @id @default(uuid())
  name          String
  crm           String        @unique
  especialidade String
  telefone      String
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  Agendamento   Agendamento[]
}

model Exame {
  id         String   @id @default(uuid())
  nome       String
  resultado  String
  data       DateTime
  pacienteId String
  paciente   Paciente @relation(fields: [pacienteId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  laudo       String?
  createdAt   DateTime      @default(now())
  Agendamento Agendamento[]
}

model Agendamento {
  id         Int      @id @default(autoincrement())
  dataHora   DateTime
  pacienteId String
  exameId    String
  medicoId   String? // opcional se algum exame não exigir médico
  paciente   Paciente @relation(fields: [pacienteId], references: [id])
  exame      Exame    @relation(fields: [exameId], references: [id])
  medico     Medico?  @relation(fields: [medicoId], references: [id])
  laudo      Laudo?   @relation("AgendamentoToLaudo")

  createdAt DateTime @default(now())
}

model Laudo {
  id            Int         @id @default(autoincrement())
  conteudo      String
  agendamentoId Int         @unique
  agendamento   Agendamento @relation("AgendamentoToLaudo", fields: [agendamentoId], references: [id])
  criadoEm      DateTime    @default(now())
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  papel     Role    @default(PACIENTE)
  criadoEm  DateTime @default(now())
}

